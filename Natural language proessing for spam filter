import pandas as pd
messages= pd.read_csv("SMSSpamCollection", sep="\t", names= ["labels", "message"])

#---------------------------------------------------------data cleaning and preprocessing
import re
import nltk
from nltk.corpus import stopwords
nltk.download("stopwords")

#---------------------------------------------------------Porter stemmer for stemming
from nltk.stem.porter import PorterStemmer

#---------------------------------------------------------WordNetLemmetizer for Lemmatizing
from nltk.stem.wordnet import WordNetLemmatizer

ps= PorterStemmer()
#lm= WordNetLemmatizer()
corpus=[]
len(messages)

for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['message'][i])
    review = review.lower()
    review = review.split()
    
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    #review = [lm.stem(word) for word in review if not word in stopwords.words('english')]------for lemmetization
    review = ' '.join(review)
    corpus.append(review)
#---------------------------------------------------------bag of words(used convienently for sentiment analysis)
from sklearn.feature_extraction.text import CountVectorizer
#Apart from CountVectorizer, we can also implement using TF-IDF, HashingVectorizer with similar syntax
cv = CountVectorizer(max_features=5000)
X = cv.fit_transform(corpus).toarray()
y=pd.get_dummies(messages['labels'])
y=y.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

'''
before performing this, we can use Grid Search CV for hyperparameter tuning to opt for optimum parameters
and enhance the accuracy
'''
from sklearn.naive_bayes import MultinomialNB
spam_detect_model = MultinomialNB().fit(X_train, y_train)

y_pred=spam_detect_model.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(y_test, y_pred)
print(accuracy)
